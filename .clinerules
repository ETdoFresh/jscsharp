# Act/Code Mode Workflow Rules

## Conciseness
- Strive to write code in as few lines as possible while maintaining readability
- Avoid unnecessary verbosity and boilerplate code
- Use language features and idioms to express intent concisely

## Readability
- Write code for humans first, computers second
- Use meaningful names for variables, functions, and classes
- Keep functions small and focused on a single responsibility
- Use consistent formatting and style throughout the codebase

## Maintainability
- Write code that is easy to modify and extend
- Avoid premature optimization - focus on clarity first

## Error Handling
- Handle errors explicitly and gracefully
- Use appropriate error types and meaningful error messages
- Fail fast and fail visibly
- If encountering persistent or complex errors, switch to architect mode for analysis and guidance

## Collaboration
- Write code that others can understand and work with
- Use version control effectively with clear commit messages
- Document public APIs and interfaces
- Be open to feedback and code reviews

## Communication
- Respond to users as briefly as possible
- Only provide necessary information to explain what was done or what is needed
- No reply is necessary if the action or result is self-explanatory
- Avoid unnecessary explanations or conversational language

---

# Git Workflow Rules

## Commit Messages
- Use present tense ("Add feature" not "Added feature")
- Start with capital letter
- No prefixes (like "feat:", "fix:", "Initial commit:", etc.)
- Be descriptive but concise
- Use dashes (-) for bullet points in multi-line messages when necessary

## Mandatory Git Workflow
Before committing, always follow these steps in order:
1. Stage all changes: `git add .`
2. Review changes: `git --no-pager diff --cached`
3. Commit changes: `git commit -m "Your commit message here"`
4. Push changes: `git push`

Note: Commands 1 and 2 may be concatenated into a single command using `&&` or `;`:
Note: Commands 3 and 4 may be concatenated into a single command using `&&` or `;`:
Note: Do not combine 1 and 2 with 3 and 4 in the same command
- Use `;` for Windows (always assume PowerShell) - e.g. `git add .; git commit -m "message"; git push`
- Use `&&` for Mac/Linux - e.g. `git add . && git commit -m "message" && git push`

## Workflow Guidelines
- Always review changes before committing
- Use descriptive commit messages that explain why changes were made
- Keep commits focused on a single logical change
- Push changes frequently to avoid large, complex merges
- Use branches for feature development and bug fixes

---

# Task Management Rules

## Before attempt_completion

- Ensure that any relevant test cases are passing
- If no test, then make sure the code is built and runs without errors
- Check if hot reload mode is running by looking at Actively Running Terminals
  - If `npm run dev` is not running, execute it before proceeding
  - If `npm run dev` fails with EADDRINUSE, continue using the existing server instance
  - Wait for webpack compilation success message before continuing

## Development Server Management
- Utilize existing development server instances when available
- Do not attempt to kill or restart servers that are already running
- When making configuration changes, let hot reload handle the updates

## Code Completion Workflow
- After implementing code changes but before committing:
  1. If the task was initiated in architect mode:
     - Switch back to architect mode for plan review and validation
     - Wait for architect's approval before proceeding with commit
  2. Git workflow steps:
     - Stage changes: `git add .`
     - Review changes: `git --no-pager diff --cached`
     - Commit with descriptive message: `git commit -m "message"`
     - Push changes: `git push`
  3. If architect review was needed and issues were identified, address them before proceeding with commit

---

# Plan/Architect Mode Workflow Rules

## Analysis Phase
- Start by analyzing the current codebase status and issues
- Document any architectural concerns or technical debt
- Keep explanations concise but thorough
- Focus on system-wide impacts and relationships

## Planning Phase
1. Begin with a clear problem statement
2. Break down complex problems into smaller, manageable tasks
3. List dependencies between components
4. Identify potential risks and bottlenecks
5. Consider scalability implications

## Solution Design
- Present solutions in numbered steps
- Each step must be actionable and clear
- Provide rationale for major architectural decisions
- Consider alternative approaches when relevant
- Document trade-offs for each significant decision

## Implementation Guidance
- COMPLETE ALL PREVIOUS PHASES BEFORE MODE SWITCHING
- Document the entire implementation plan first
- Break down implementation into concrete, actionable steps
- Specify tools and approaches for each step
- Only switch to Code mode after the complete plan is documented
- Ensure each step has clear acceptance criteria
- Define measurable success indicators
- List any required testing or validation steps

## Plan Completeness Requirements
- Verify all phases (Analysis, Planning, Solution, Implementation) are documented
- Ensure each implementation step is specific and actionable
- Confirm dependencies and order of operations are clear
- Include error handling and edge case considerations
- Document testing and validation requirements

## Documentation
- Update relevant documentation as part of the plan
- Include examples or diagrams when helpful
- Document any API changes or breaking modifications
- Reference related tickets or requirements

## Mode Switching Protocol
1. Review plan completeness against all requirements above
2. Verify no open questions or unaddressed concerns remain
3. Present complete plan to user for review
4. Only then proceed with mode switch for implementation